#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202207081016-git
# @Author            :  Jason Hempstead
# @Contact           :  jason@casjaysdev.com
# @License           :  WTFPL
# @ReadME            :  tmux-new --help
# @Copyright         :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @Created           :  Friday, Jul 08, 2022 10:16 EDT
# @File              :  tmux-new
# @Description       :
# @TODO              :
# @Other             :
# @Resource          :
# @sudo/root         :  no
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0" 2>/dev/null)"
VERSION="202207081016-git"
HOME="${USER_HOME:-$HOME}"
USER="${SUDO_USER:-$USER}"
RUN_USER="${SUDO_USER:-$USER}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set bash options
if [[ "$1" == "--debug" ]]; then shift 1 && set -xo pipefail && export SCRIPT_OPTS="--debug" && export _DEBUG="on"; fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function file
if [[ -f "$SRC_DIR/functions.bash" ]]; then
  FUNCTIONS_DIR="$SRC_DIR"
  . "$FUNCTIONS_DIR/functions.bash"
elif [[ -f "$HOME/.local/bin/functions.bash" ]]; then
  FUNCTIONS_DIR="$HOME/.local/bin"
  . "$FUNCTIONS_DIR/functions.bash"
else
  printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from $FUNCTIONS_DIR"
  return 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# helper functions - See github.com/dfmgr/misc/bin/functions.bash
__version() { app_version; }
__list_options() { printf_custom "$1" "$2: $(echo ${3:-$ARRAY} | __sed 's|:||g;s|'$4'| '$5'|g')" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__help() {
  app_help "4" "Usage: $PROG  [options] [name] [win1_name] [win2_name]" \
    "$PROG create                 -  create a config file" \
    "$PROG edit                   -  edit config file" \
    "$PROG ssh                    -  enviroment for ssh" \
    "$PROG build                  -  enviroment for building" \
    "$PROG dev                    -  enviroment for development" \
    "$PROG node                   -  enviroment for node projects" \
    "$PROG test                   -  enviroment for testing" \
    "$PROG default                -  plain enviroment" \
    "$PROG --dir                  -  display help" \
    "$PROG --config               -  create config file" \
    "$PROG --debug                -  change shell" \
    "$PROG --version              -  display version" \
    "$PROG --help                 -  display help" \
    "$PROG --help                 -  display help" \
    "$PROG --options              -  used by completions"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  [[ -z "$NOTIFY_CLIENT_NAME" ]] || NOTIFY_CLIENT_NAME=""
  [[ "$INIT_CONFIG" = "TRUE" ]] || printf_green "Generating the config file in"
  [[ "$INIT_CONFIG" = "TRUE" ]] || printf_green "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE"
  [ -d "$TMUX_NEW_CONFIG_DIR" ] || mkdir -p "$TMUX_NEW_CONFIG_DIR"
  [ -d "$TMUX_NEW_CONFIG_BACKUP_DIR" ] || mkdir -p "$TMUX_NEW_CONFIG_BACKUP_DIR"
  [ -f "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" ] &&
    cp -Rf "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" "$TMUX_NEW_CONFIG_BACKUP_DIR/$TMUX_NEW_CONFIG_FILE.$$"
  cat <<EOF >"$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE"
# Settings for tmux-new
TMUX_NEW_CONFIG_DIR="${TMUX_NEW_CONFIG_DIR:-$TMUX_NEW_CONFIG_DIR}"

# Notification settings
TMUX_NEW_GOOD_MESSAGE="${TMUX_NEW_GOOD_MESSAGE:-Everything Went OK}"
TMUX_NEW_ERROR_MESSAGE="${TMUX_NEW_ERROR_MESSAGE:-Well something seems to have gone wrong}"
TMUX_NEW_NOTIFY_ENABLED="${TMUX_NEW_NOTIFY_ENABLED:-yes}"
TMUX_NEW_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
TMUX_NEW_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$TMUX_NEW_NOTIFY_CLIENT_ICON}"

# Colorization settings
TMUX_NEW_OUTPUT_COLOR="${TMUX_NEW_OUTPUT_COLOR:-5}"
TMUX_NEW_OUTPUT_COLOR_GOOD="${TMUX_NEW_OUTPUT_COLOR_GOOD:-2}"
TMUX_NEW_OUTPUT_COLOR_ERROR="${TMUX_NEW_OUTPUT_COLOR_ERROR:-1}"

EOF
  if [ -f "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" ]; then
    [[ "$INIT_CONFIG" = "TRUE" ]] || printf_green "Your config file for $APPNAME has been created"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional functions
__cd() {
  TMUX_NEW_CWD="${1:-$TMUX_NEW_CWD}"
  [[ -d "$TMUX_NEW_CWD" ]] || mkdir -p "$TMUX_NEW_CWD"
  builtin cd "$TMUX_NEW_CWD" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__launch_tmux() {
  local name="$1"
  [ -f "$TMUX_NEW_FILE_CONF/$name" ] || printf_exit "No config file found for $name"
  # Start tmux
  if [[ -z "$TMUX" ]]; then
    sleep 3
    tmux -f "$TMUX_NEW_FILE_CONF/$name" new-session -D -A -s $name 'tmux source-file '$TMUX_NEW_FILE_LOCAL''
    return $?
  else
    printf_exit "You appear to already have tmux running"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_conf() {
  local name="${1:-default}"
  local win_1="${2:-1}"
  local win_2="${3:-2}"
  [[ -d "$TMUX_NEW_FILE_CONF" ]] || mkdir -p "$TMUX_NEW_FILE_CONF"
  [[ -d "$TMUX_NEW_FILE_LOCAL" ]] || mkdir -p "$TMUX_NEW_FILE_LOCAL"
  if [[ -f "$TMUX_NEW_FILE_CONF/$name" ]] && [[ -f "$TMUX_NEW_FILE_LOCAL/$name" ]]; then
    return 0
  fi
  # Create main config files
  if [[ -f "$TMUX_NEW_CONFIG_DIR/tmux-new.conf" ]] && [[ ! -f "$TMUX_NEW_FILE_CONF/$name" ]]; then
    printf_cyan "Creating $TMUX_NEW_FILE_CONF/$name"
    cp -Rf "$TMUX_NEW_CONFIG_DIR/tmux-new.conf" "$TMUX_NEW_FILE_CONF/$name"
    sed -i 's|TMUX_NEW_CONF_FILE|'${TMUX_NEW_CONFIG_DIR}/${name}'|g' "$TMUX_NEW_FILE_CONF/$name"
    [[ -f "$TMUX_NEW_FILE_CONF/$name" ]] &&
      printf_blue "config file has been created" ||
      printf_exit "Failed to create config file"
  fi
  # Create local config files
  if [[ ! -f "$TMUX_NEW_FILE_LOCAL/$name" ]]; then
    printf_green "Creating local tmux config file"
    cat <<EOF >"$TMUX_NEW_FILE_LOCAL/$name"
# start with 2 windows
neww -n $win_1   bash
neww -n $win_2   bash

EOF
    [[ -f "$TMUX_NEW_FILE_LOCAL/$name" ]] &&
      printf_blue "local config file has been created" ||
      printf_exit "Failed to create local config file"
  fi
  return
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__edit() {
  local name="$1"
  local TMUX_NEW_CONFIG_DIR="$TMUX_NEW_CONFIG_DIR"
  [[ -n "$EDITOR" ]] || printf_exit "EDITOR is not set"
  [[ -f "$TMUX_NEW_FILE_CONF/$name" ]] || printf_exit "Missing: $TMUX_NEW_FILE_CONF/$name"
  eval $EDITOR "$TMUX_NEW_FILE_CONF/$name"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default variables
exitCode=
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
TMUX_NEW_LOG_DIR="${TMUX_NEW_LOG_DIR:-$HOME/.local/log/tmux-new}"
TMUX_NEW_CACHE_DIR="${TMUX_NEW_CACHE_DIR:-$HOME/.cache/tmux-new}"
TMUX_NEW_CONFIG_DIR="${TMUX_NEW_CONFIG_DIR:-$HOME/.config/misc/settings/tmux-new}"
TMUX_NEW_OPTIONS_DIR="${TMUX_NEW_OPTIONS_DIR:-$HOME/.local/share/misc/settings/tmux-new/options}"
TMUX_NEW_CONFIG_BACKUP_DIR="${TMUX_NEW_CONFIG_BACKUP_DIR:-$HOME/.local/share/misc/settings/tmux-new/backups}"
TMUX_NEW_TEMP_DIR="${TMUX_NEW_TEMP_DIR:-$HOME/.local/tmp/misc/tmux-new}"
TMUX_NEW_CONFIG_FILE="${TMUX_NEW_CONFIG_FILE:-settings.conf}"
TMUX_NEW_GOOD_MESSAGE="${TMUX_NEW_GOOD_MESSAGE:-Everything Went OK}"
TMUX_NEW_ERROR_MESSAGE="${TMUX_NEW_ERROR_MESSAGE:-Well something seems to have gone wrong}"
TMUX_NEW_NOTIFY_ENABLED="${TMUX_NEW_NOTIFY_ENABLED:-yes}"
TMUX_NEW_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
TMUX_NEW_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$TMUX_NEW_NOTIFY_CLIENT_ICON}"
TMUX_NEW_OUTPUT_COLOR="${TMUX_NEW_OUTPUT_COLOR:-5}"
TMUX_NEW_OUTPUT_COLOR_GOOD="${TMUX_NEW_OUTPUT_COLOR_GOOD:-2}"
TMUX_NEW_OUTPUT_COLOR_ERROR="${TMUX_NEW_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Enviroment overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" ] || [[ "$*" = *config ]] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" ] && . "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories and files exist
[ -d "$TMUX_NEW_LOG_DIR" ] || mkdir -p "$TMUX_NEW_LOG_DIR" &>/dev/null
[ -d "$TMUX_NEW_TEMP_DIR" ] || mkdir -p "$TMUX_NEW_TEMP_DIR" &>/dev/null
[ -d "$TMUX_NEW_CACHE_DIR" ] || mkdir -p "$TMUX_NEW_CACHE_DIR" &>/dev/null
TMUX_NEW_TEMP_FILE="${TMUX_NEW_TEMP_FILE:-$(mktemp $TMUX_NEW_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap 'exitCode=${exitCode:-$?};[ -n "$TMUX_NEW_TEMP_FILE" ] && [ -f "$TMUX_NEW_TEMP_FILE" ] && rm -Rf "$TMUX_NEW_TEMP_FILE" &>/dev/null' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
if [ "$TMUX_NEW_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    export NOTIFY_GOOD_MESSAGE="${TMUX_NEW_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${TMUX_NEW_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_NAME="${TMUX_NEW_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_ICON="${TMUX_NEW_NOTIFY_CLIENT_ICON}"
    notifications "$@" && exitCode=0 || exitCode=1
    unset NOTIFY_CLIENT_NAME NOTIFY_CLIENT_ICON NOTIFY_GOOD_MESSAGE NOTIFY_ERROR_MESSAGE
    return ${exitCode:-$?}
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show warn message if variables are missing

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS=""
LONGOPTS="debug,options,config,version,help,dir:"
ARRAY="create build ssh dev node test edit default"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$(basename "$0" 2>/dev/null)" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    ;;
  --options)
    shift 1
    [ -n "$1" ] || printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "5" "Short Options" "-$SHORTOPTS" ',' '-'
    [ -z "$LONGOPTS" ] || __list_options "5" "Long Options" "--$LONGOPTS" ',' '--'
    [ -z "$ARRAY" ] || __list_options "5" "Base Options" "$ARRAY" ',' ''
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --dir)
    TMUX_NEW_CWD="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error --ask bash tmux || exit 1 # exit 1 if not found
#__am_i_online --error || exit 1     # exit 1 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
TMUX_NEW_FILE_CONF="$TMUX_NEW_CONFIG_DIR/conf"
TMUX_NEW_FILE_LOCAL="$TMUX_NEW_CONFIG_DIR/local"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
[[ -n "$TMUX_NEW_CWD" ]] && __cd "$TMUX_NEW_CWD"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
build)
  shift 1
  __tmux_conf "build" "${1:-build}" "${1-:log}"
  __launch_tmux "build"
  exit $?
  ;;
ssh)
  shift 1
  __tmux_conf "ssh" "${1:-local}" "${1-:remote}"
  __launch_tmux "ssh"
  exit $?
  ;;
dev)
  shift 1
  __tmux_conf "dev" "${1:-dev}" "${1-:test}"
  __launch_tmux "dev"
  exit $?
  ;;
node)
  shift 1
  __tmux_conf "node" "${1:-server}" "${1-:client}"
  __launch_tmux "node"
  exit $?
  ;;
test)
  shift 1
  __tmux_conf "test" "${1:-1}" "${1-:2}"
  __launch_tmux "test"
  exit $?
  ;;
default)
  shift 1
  __tmux_conf "default" "${1:-1}" "${1-:2}"
  __launch_tmux "default"
  exit $?
  ;;
edit)
  shift 1

  ;;
*)
  if [[ $# -eq 0 ]]; then
    printf_red "Usage: $APPNAME [options] [name] [win1_name] [win2_name]"
    exit 1
  fi
  __tmux_conf "$@"
  __launch_tmux "$1"
  exitCode=$?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
